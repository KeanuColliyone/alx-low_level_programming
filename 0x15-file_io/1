#include <stdio.h>
#include <stdlib.h>
#include <elf.h>
#include <fcntl.h>
#include <unistd.h>

/**
 * display_elf_header - Displays information from the ELF header.
 *
 * @ehdr: Pointer to the ELF header structure.
 */
void display_elf_header(Elf64_Ehdr *ehdr) {
    printf("ELF Header:\n");
    printf("  Magic:   ");
    for (int i = 0; i < 16; i++) {
        printf("%02x%c", ehdr->e_ident[i], (i < 15) ? ' ' : '\n');
    }
    printf("  Class:                             %s\n",
           (ehdr->e_ident[EI_CLASS] == ELFCLASS32) ? "ELF32" : "ELF64");
    printf("  Data:                              %s\n",
           (ehdr->e_ident[EI_DATA] == ELFDATA2LSB) ? "2's complement, little endian" :
           ((ehdr->e_ident[EI_DATA] == ELFDATA2MSB) ? "2's complement, big endian" : "Invalid"));
    printf("  Version:                           %d (current)\n", ehdr->e_ident[EI_VERSION]);
    printf("  OS/ABI:                            ");
    switch (ehdr->e_ident[EI_OSABI]) {
        case ELFOSABI_SYSV:
            printf("UNIX - System V\n");
            break;
        case ELFOSABI_HPUX:
            printf("HP-UX\n");
            break;
        case ELFOSABI_NETBSD:
            printf("UNIX - NetBSD\n");
            break;
        case ELFOSABI_LINUX:
            printf("UNIX - Linux\n");
            break;
        case ELFOSABI_SOLARIS:
            printf("UNIX - Solaris\n");
            break;
        case ELFOSABI_AIX:
            printf("UNIX - AIX\n");
            break;
        case ELFOSABI_IRIX:
            printf("IRIX\n");
            break;
        case ELFOSABI_FREEBSD:
            printf("UNIX - FreeBSD\n");
            break;
        case ELFOSABI_TRU64:
            printf("UNIX - TRU64\n");
            break;
        case ELFOSABI_MODESTO:
            printf("Novell - Modesto\n");
            break;
        case ELFOSABI_OPENBSD:
            printf("UNIX - OpenBSD\n");
            break;
        case ELFOSABI_OPENVMS:
            printf("VMS - OpenVMS\n");
            break;
        case ELFOSABI_NSK:
            printf("HP - Non-Stop Kernel\n");
            break;
        case ELFOSABI_AROS:
            printf("AROS\n");
            break;
        default:
            printf("<unknown: %x>\n", ehdr->e_ident[EI_OSABI]);
            break;
    }
    printf("  ABI Version:                       %d\n", ehdr->e_ident[EI_ABIVERSION]);
    printf("  Type:                              ");
    switch (ehdr->e_type) {
        case ET_REL:
            printf("REL (Relocatable file)\n");
            break;
        case ET_EXEC:
            printf("EXEC (Executable file)\n");
            break;
        case ET_DYN:
            printf("DYN (Shared object file)\n");
            break;
        case ET_CORE:
            printf("CORE (Core file)\n");
            break;
        default:
            printf("Unknown\n");
            break;
    }
    printf("  Entry point address:               0x%lx\n", ehdr->e_entry);
}

/**
 * main - Displays the ELF header information of an ELF file.
 *
 * @ac: Number of arguments.
 * @av: Array of arguments.
 *
 * Return: 0 on success, 98 on error.
 */
int main(int ac, char **av) {
    int fd;
    Elf64_Ehdr ehdr;

    if (ac != 2) {
        dprintf(2, "Usage: %s elf_filename\n", av[0]);
        return (98);
    }

    fd = open(av[1], O_RDONLY);
    if (fd == -1) {
        dprintf(2, "Error: Can't open file %s\n", av[1]);
        return (98);
    }

    if (read(fd, &ehdr, sizeof(ehdr)) != sizeof(ehdr)) {
        dprintf(2, "Error: Can't read from file %s\n", av[1]);
        close(fd);
        return (98);
    }

    if (ehdr.e_ident[EI_MAG0] != ELFMAG0 || ehdr.e_ident[EI_MAG1] != ELFMAG1 ||
        ehdr.e_ident[EI_MAG2] != ELFMAG2 || ehdr.e_ident[EI_MAG3] != ELFMAG3) {
        dprintf(2, "Error: Not an ELF file: %s\n", av[1]);
        close(fd);
        return (98);
    }

    display_elf_header(&ehdr);
    close(fd);
    return (0);
}

